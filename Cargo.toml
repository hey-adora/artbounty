cargo-features = ["codegen-backend", "profile-rustflags"]

[package]
name = "artcord"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

#[build]
#linker = "clang"
#rustflags = ["-C", "link-arg=-fuse-ld=/usr/bin/mold"]

#[target.wasm32-unknown-unknown]
#linker = "clang"
#rustflags = ["-C", "link-arg=-fuse-ld=/usr/bin/mold", "-Zcodegen-backend=cranelift"]
#
#[target.x86_64-unknown-linux-gnu]
#linker = "clang"
#rustflags = ["-C", "link-arg=-fuse-ld=/usr/bin/mold", "-Zcodegen-backend=cranelift"]
#codegen-backend = "cranelift"
#

#[target.x86_64-unknown-linux-gnu]
#linker = "clang"
#rustflags = ["-C", "link-arg=-fuse-ld=/usr/bin/mold"]


[workspace]
members = [
  "benchmark",
]

[profile.dev]
opt-level = 0
rustflags = ["-Z", "threads=24"]
incremental = true
codegen-units = 256
#linker = "clang"
#rustflags = ["-C", "link-arg=--ld-path=/usr/bin/mold"]
#codegen-backend = "cranelift"

[profile.dev.package."*"]
opt-level = 3
#
#[unstable]
#codegen-backend = true

[dependencies]
actix-files = { version = "0.6.2", optional = true }
actix-web = { version = "4.4.0", optional = true, features = ["macros"] }
console_error_panic_hook = "0.1.7"
cfg-if = "1"
http = { version = "1.0.0", optional = true }
leptos = { version = "0.5.3", features = ["nightly"] }
leptos_meta = { version = "0.5.4", features = ["nightly"] }
leptos_actix = { version = "0.5.4", optional = true }
leptos_router = { version = "0.5.4", features = ["nightly"] }
wasm-bindgen = { version = "=0.2.89", features = [] }
leptos-use = { version = "0.8.2", features = [] }
web-sys = { version = "0.3.66", features = [] }
js-sys = { version = "0.3.66", features = [] }
rand = { version = "0.8.5", features = [] }
actix-web-actors = { version = "4.2.0", features = [], optional = true }
actix = { version = "0.13.1", features = [], optional = true }
uuid = { version = "1.4.1", features = ["v4", "serde"] }
futures = { version = "0.3.28", features = [
  "alloc",
  "async-await",
  "executor",
  "std",
  "futures-executor",
], optional = true }
serenity = { version = "0.11.7", features = [
  "base64",
  "tokio",
  "builder",
  "bytes",
  "cache",
  "chrono",
  "client",
  "command_attr",
  "dashmap",
  "default_no_backend",
  "flate2",
  "framework",
  "gateway",
  "http",
  "levenshtein",
  "model",
  "parking_lot",
  "rustls_backend",
  "standard_framework",
  "static_assertions",
  "typemap_rev",
  "utils",
  "uwl",
], optional = true }
async-std = { version = "1.12.0", features = [
  "alloc",
  "async-channel",
  "async-global-executor",
  "async-io",
  "async-lock",
  "crossbeam-utils",
  "futures-channel",
  "futures-io",
  "futures-lite",
  "gloo-timers",
  "kv-log-macro",
  "log",
  "memchr",
  "once_cell",
  "pin-project-lite",
  "pin-utils",
  "slab",
  "slab",
  "std",
  "wasm-bindgen-futures",
], optional = true }
dotenv = { version = "0.15.0", optional = true }
reqwest = { version = "0.11.22", optional = true, features = [
  "__tls",
  "default-tls",
  "hyper-tls",
  "native-tls-crate",
  "tokio-native-tls",
] }
png = { version = "0.17.10", optional = true }
png_pong = { version = "0.8.2", optional = true }
image = { version = "0.24.7", optional = true, features = [
  "bmp",
  "dds",
  "dxt",
  "exr",
  "farbfeld",
  "gif",
  "hdr",
  "ico",
  "jpeg",
  "jpeg_rayon",
  "openexr",
  "png",
  "pnm",
  "qoi",
  "tga",
  "tiff",
  "webp",
] }
webp = { version = "0.2.6", optional = true, features = ["image", "img"] }
anyhow = { version = "1.0.75", optional = true, features = ["std"] }
sha256 = { version = "1.4.0", optional = true, features = ["async", "tokio"] }
mongodb = { version = "2.7.0", optional = true, features = [
  "serde_bytes",
  "tokio-runtime",
] }
serde = { version = "1.0.189", features = ["std"] }
md-5 = { version = "0.10.6", optional = true, features = ["std"] }
hashes = { version = "0.1.9", optional = true }
chrono = { version = "0.4.31", features = [
  "android-tzdata",
  "clock",
  "iana-time-zone",
  "js-sys",
  "oldtime",
  "std",
  "wasm-bindgen",
  "wasmbind",
  "winapi",
  "windows-targets",
] }
thiserror = "1.0.50"
tokio = { version = "1.33.0", optional = true }
bson = { version = "2.7.0", features = ["serde_with", "serde_with-3", "chrono"] }
bytecheck = { version = "0.6.11", features = ["simdutf8", "std"] }
jsonwebtoken = "9.2.0"
bcrypt = "0.15.0"
base64 = "0.21.7"
gloo-net = "0.5.0"
ed25519 = "2.2.3"
ed25519-dalek = { version = "2.1.0", features = ["signature", "rand_core"] }
rand_core = "0.6.4"
bincode = "1.3.3"
rmp = "0.8.12"
rmp-serde = "1.1.2"
rusqlite = "0.30.0"
field_types = "1.1.0"
const_format = "0.2.32"


[features]
default = ["ssr"]
csr = ["leptos/csr", "leptos_meta/csr", "leptos_router/csr"]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
  "dep:actix-files",
  "dep:actix-web",
  "dep:leptos_actix",
  "dep:actix-web-actors",
  "dep:actix",
  "dep:futures",
  "dep:serenity",
  "dep:async-std",
  "dep:dotenv",
  "dep:reqwest",
  "dep:png",
  "dep:png_pong",
  "dep:webp",
  "dep:image",
  "dep:anyhow",
  "dep:sha256",
  "dep:mongodb",
  "dep:md-5",
  "dep:hashes",
  "dep:tokio",




  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "leptos_start5"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg	
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/output.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "0.0.0.0:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
